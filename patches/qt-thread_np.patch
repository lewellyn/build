--- a/qtdeclarative/src/qml/jsruntime/qv4engine.cpp
+++ b/qtdeclarative/src/qml/jsruntime/qv4engine.cpp
@@ -73,6 +73,11 @@
 #include "qv4isel_moth_p.h"

 #if USE(PTHREADS)
+
+#if OS(SOLARIS)
+#include <thread.h>
+#endif
+
 #  include <pthread.h>
 #endif

@@ -103,7 +108,12 @@
 quintptr getStackLimit()
     } else
         size = pthread_get_stacksize_np(thread_self);
     stackLimit -= size;
+#  elif OS(SOLARIS)
+    stack_t ss;
+    int r = thr_stksegment(&ss);
+    (void)r;
+    stackLimit = reinterpret_cast<quintptr>(ss.ss_sp);
 #  else
     void* stackBottom = 0;
     pthread_attr_t attr;


--- a/qtdeclarative/src/qml/jsruntime/qv4mm.cpp
+++ b/qtdeclarative/src/qml/jsruntime/qv4mm.cpp
@@ -67,6 +67,11 @@
 #include <sys/storage.h>   // __tls()
 #endif

+#if OS(SOLARIS)
+#include <thread.h>
+#include <pthread.h>
+#endif
+
 QT_BEGIN_NAMESPACE

 using namespace QV4;
@@ -218,7 +223,12 @@
 MemoryManager::MemoryManager()
 #  if OS(DARWIN)
     void *st = pthread_get_stackaddr_np(pthread_self());
     m_d->stackTop = static_cast<quintptr *>(st);
+#  elif OS(SOLARIS)
+    stack_t ss;
+    int r = thr_stksegment(&ss);
+    (void)r;
+    m_d->stackTop = static_cast<quintptr *>(ss.ss_sp) + ss.ss_size/sizeof(quintptr);
 #  else
     void* stackBottom = 0;
     pthread_attr_t attr;
